# Copyright 2022 Mithril Security. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import contextlib
from functools import wraps
import getpass
import logging
import os
import pkgutil
import socket
import ssl
import platform
from hashlib import sha256
from typing import Any, List, Optional, Tuple, Union

from cryptography.exceptions import InvalidSignature
from grpc import Channel, RpcError, secure_channel, ssl_channel_credentials
from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PublicKey

from blindai.dcap_attestation import (
    Policy,
    verify_claims,
    verify_dcap_attestation,
)

# These modules are generated by grpc proto compiler, from proto files in proto
import blindai.pb as _
from blindai.pb.securedexchange_pb2 import (
    Payload as PbPayload,
    RunModelRequest as PbRunModelRequest,
    RunModelReply as PbRunModelReply,
    SendModelRequest as PbSendModelRequest,
    ClientInfo,
    TensorInfo as PbTensorInfo,
    DeleteModelRequest as PbDeleteModelRequest,
    TensorData as PbTensorData,
)
import grpc
import blindai.pb.licensing_pb2 as licensing_pb2
import blindai.pb.licensing_pb2_grpc as licensing_pb2_grpc
from blindai.pb.proof_files_pb2 import ResponseProof
from blindai.pb.securedexchange_pb2_grpc import ExchangeStub
from blindai.pb.untrusted_pb2 import GetCertificateRequest as certificate_request
from blindai.pb.untrusted_pb2 import GetServerInfoRequest as server_info_request
from blindai.pb.untrusted_pb2 import GetSgxQuoteWithCollateralReply
from blindai.pb.untrusted_pb2 import GetSgxQuoteWithCollateralRequest as quote_request
from blindai.pb.untrusted_pb2_grpc import AttestationStub
from blindai.utils.errors import (
    SignatureError,
    VersionError,
    check_rpc_exception,
    check_socket_exception,
)
from blindai.utils.utils import (
    create_byte_chunk,
    encode_certificate,
    get_enclave_signing_key,
    strip_https,
    supported_server_version,
    ModelDatumType,
)
from blindai.version import __version__ as app_version

from blindai.utils.serialize import deserialize_tensor, serialize_tensor

MITHRIL_SERVICES_URL = os.getenv(
    "MITHRIL_SERVICES_URL", "api.cloud.mithrilsecurity.io:4000"
)
MITHRIL_SERVICES_INSECURE = os.getenv("MITHRIL_SERVICES_INSECURE") == "true"
if not MITHRIL_SERVICES_INSECURE:
    if "MITHRIL_SERVICES_CA" in os.environ:
        with os.open(os.getenv("MITHRIL_SERVICES_CA")) as f:
            MITHRIL_SERVICES_CA = f.read()
    else:
        MITHRIL_SERVICES_CA = pkgutil.get_data(__name__, "tls/mithril_services_ca.pem")
else:
    MITHRIL_SERVICES_CA = False

if not MITHRIL_SERVICES_INSECURE:
    if "MITHRIL_SERVICES_POLICY" in os.environ:
        with os.open(os.getenv("MITHRIL_SERVICES_POLICY")) as f:
            MITHRIL_SERVICES_POLICY = f.read()
    else:
        MITHRIL_SERVICES_POLICY = pkgutil.get_data(
            __name__, "tls/mithril_services_policy.toml"
        ).decode("utf-8")
else:
    MITHRIL_SERVICES_POLICY = False

CONNECTION_TIMEOUT = 10


def dtype_to_numpy(dtype: ModelDatumType) -> str:
    translation_map = {
        ModelDatumType.F32: "float32",
        ModelDatumType.F64: "float64",
        ModelDatumType.I32: "int32",
        ModelDatumType.I64: "int64",
        ModelDatumType.U32: "uint32",
        ModelDatumType.U64: "uint64",
        ModelDatumType.U8: "uint8",
        ModelDatumType.U16: "uint16",
        ModelDatumType.I8: "int8",
        ModelDatumType.I16: "int16",
        ModelDatumType.Bool: "bool",
    }
    if dtype not in translation_map:
        raise ValueError(f"Numpy does not support datum type {dtype}.")
    return translation_map[dtype]


def dtype_to_torch(dtype: ModelDatumType) -> str:
    translation_map = {
        ModelDatumType.F32: "float32",
        ModelDatumType.F64: "float64",
        ModelDatumType.I32: "int32",
        ModelDatumType.I64: "int64",
        # ModelDatumType.U32: "uint32",
        # ModelDatumType.U64: "uint64",
        ModelDatumType.U8: "uint8",
        # ModelDatumType.U16: "uint16",
        ModelDatumType.I8: "int8",
        ModelDatumType.I16: "int16",
        ModelDatumType.Bool: "bool",
    }
    if dtype not in translation_map:
        raise ValueError(f"Torch does not support datum type {dtype}.")
    return translation_map[dtype]


def translate_dtype(dtype):
    if isinstance(dtype, ModelDatumType):
        return dtype

    elif type(dtype).__module__ == "numpy" and type(dtype).__name__.startswith("dtype"):
        numpy_dtype_translation = {
            "float32": ModelDatumType.F32,
            "float64": ModelDatumType.F64,
            "int32": ModelDatumType.I32,
            "int64": ModelDatumType.I64,
            "uint32": ModelDatumType.U32,
            "uint64": ModelDatumType.U64,
            "uint8": ModelDatumType.U8,
            "uint16": ModelDatumType.U16,
            "int8": ModelDatumType.I8,
            "int16": ModelDatumType.I16,
            "bool": ModelDatumType.Bool,
        }
        if str(dtype) not in numpy_dtype_translation:
            raise ValueError(f"Numpy dtype {str(dtype)} is not supported.")
        return numpy_dtype_translation[str(dtype)]

    if type(dtype).__module__ == "torch" and type(dtype).__name__ == "dtype":
        # Torch does not support unsigned ints except u8.
        torch_dtype_translation = {
            "torch.float32": ModelDatumType.F32,
            "torch.float64": ModelDatumType.F64,
            "torch.int32": ModelDatumType.I32,
            "torch.int64": ModelDatumType.I64,
            # "torch.uint32": ModelDatumType.U32,
            # "torch.uint64": ModelDatumType.U64,
            "torch.uint8": ModelDatumType.U8,
            # "torch.uint16": ModelDatumType.U16,
            "torch.int8": ModelDatumType.I8,
            "torch.int16": ModelDatumType.I16,
            "torch.bool": ModelDatumType.Bool,
        }
        if str(dtype) not in torch_dtype_translation:
            raise ValueError(f"Torch dtype {str(dtype)} is not supported.")
        return torch_dtype_translation[str(dtype)]

    if isinstance(dtype, str):
        str_dtype_translation = {
            "float32": ModelDatumType.F32,
            "f32": ModelDatumType.F32,
            "float64": ModelDatumType.F64,
            "f64": ModelDatumType.F64,
            "int32": ModelDatumType.I32,
            "i32": ModelDatumType.I32,
            "int64": ModelDatumType.I64,
            "i64": ModelDatumType.I64,
            "uint32": ModelDatumType.U32,
            "u32": ModelDatumType.U32,
            "uint64": ModelDatumType.U64,
            "u64": ModelDatumType.U64,
            "uint8": ModelDatumType.U8,
            "u8": ModelDatumType.U8,
            "uint16": ModelDatumType.U16,
            "u16": ModelDatumType.U16,
            "int8": ModelDatumType.I8,
            "i8": ModelDatumType.I8,
            "int16": ModelDatumType.I16,
            "i16": ModelDatumType.I16,
            "bool": ModelDatumType.Bool,
        }
        if dtype.lower() not in str_dtype_translation:
            raise ValueError(f"Datum type {dtype} is not understood.")
        return str_dtype_translation[dtype.lower()]

    raise ValueError(
        f"DatumType instance {type(dtype).__module__}.{type(dtype).__name__} not supported"
    )


def translate_tensors(tensors, dtypes, shapes):
    ret = []

    if not isinstance(tensors, list) and not isinstance(tensors[0], list):
        tensors = [tensors]
    if dtypes is not None and isinstance(dtypes, list):
        dtypes = [dtypes]
    if shapes is not None and (
        not isinstance(shapes, list) or not isinstance(shapes[0], list)
    ):
        shapes = [shapes]

    for i, tensor in enumerate(tensors):
        or_dtype = dtypes[i] if dtypes is not None and len(dtypes) > i else None
        or_shape = shapes[i] if shapes is not None and len(shapes) > i else None

        if type(tensor).__module__ == "torch" and type(tensor).__name__ == "Tensor":
            dtype = translate_dtype(tensor.dtype)
            shape = list(tensor.shape)
            iterable = tensor.flatten()

        elif type(tensor).__module__ == "numpy" and type(tensor).__name__ == "ndarray":
            dtype = translate_dtype(tensor.dtype)
            shape = list(tensor.shape)
            iterable = tensor.flatten()

        else:
            # Input is flat list.
            if not isinstance(tensor, list):
                raise ValueError(
                    f"Input tensor has an unsupported type: {type(tensor).__module__}.{type(tensor).__name__}"
                )

            dtype = translate_dtype(or_dtype)
            shape = list(or_shape)
            iterable = tensor

        if or_dtype is not None and or_dtype != dtypes:
            raise ValueError(
                f"Given tensor has dtype {str(tensor.dtype)}, but {or_dtype} was expected."
            )
        if or_shape is not None and not all(
            (s is None or s == shapes[i] for i, s in enumerate(or_shape))
        ):
            raise ValueError(
                f"Given tensor has shape {list(tensor.shape)}, but {or_shape} was expected."
            )

        # todo validate tensor content, dtype and shape

        ret.append((iterable, dtype, shape))

    return ret


def _validate_quote(
    attestation: GetSgxQuoteWithCollateralReply, policy: Policy
) -> Ed25519PublicKey:
    """Returns the enclave signing key"""

    claims = verify_dcap_attestation(
        attestation.quote, attestation.collateral, attestation.enclave_held_data
    )

    verify_claims(claims, policy)
    server_cert = claims.get_server_cert()
    enclave_signing_key = get_enclave_signing_key(server_cert)

    return enclave_signing_key


def _get_input_output_tensors(
    tensor_inputs: Optional[List[List[Any]]],
    tensor_outputs: Optional[ModelDatumType],
    shape: Tuple,
    datum_type: ModelDatumType,
    dtype_out: ModelDatumType,
) -> Tuple[List[List[Any]], List[ModelDatumType]]:
    if tensor_inputs is None or tensor_outputs is None:
        tensor_inputs = [shape, datum_type]
        tensor_outputs = [dtype_out]

    if type(tensor_inputs[0]) != list:
        tensor_inputs = [tensor_inputs]
    if type(tensor_outputs[0]) != list:
        tensor_outputs = [tensor_outputs]

    inputs = []
    for i, tensor_input in enumerate(tensor_inputs):
        dtype = (
            translate_dtype(tensor_input[1]) if tensor_input[1] is not None else None
        )
        inputs.append(
            PbTensorInfo(
                dims=tensor_input[0],
                datum_type=translate_dtype(tensor_input[1]),
                index=i,
            )
        )

    outputs = []
    for i, tensor_output in enumerate(tensor_outputs):
        dtype = (
            translate_dtype(tensor_output[0]) if tensor_output[0] is not None else None
        )
        outputs.append(PbTensorInfo(datum_type=dtype, index=i))

    return (inputs, outputs)


class SignedResponse:
    payload: Optional[bytes] = None
    signature: Optional[bytes] = None
    attestation: Optional[GetSgxQuoteWithCollateralReply] = None

    def is_simulation_mode(self) -> bool:
        return self.attestation is None

    def is_signed(self) -> bool:
        return self.signature is not None

    def save_to_file(self, path: str):
        """Save the response to a file.
        The response can later be loaded with:

        ```py
        res = SignedResponse()
        res.load_from_file(path)
        ```

        Args:
            path (str): Path of the file.
        """
        with open(path, mode="wb") as file:
            file.write(self.as_bytes())

    def as_bytes(self) -> bytes:
        """Save the response as bytes.
        The response can later be loaded with:

        ```py
        res = SignedResponse()
        res.load_from_bytes(data)
        ```

        Returns:
            bytes: The data.
        """
        return ResponseProof(
            payload=self.payload,
            signature=self.signature,
            attestation=self.attestation,
        ).SerializeToString()

    def load_from_file(self, path: str):
        """Load the response from a file.

        Args:
            path (str): Path of the file.
        """
        with open(path, "rb") as file:
            self.load_from_bytes(file.read())

    def load_from_bytes(self, b: bytes):
        """Load the response from bytes.

        Args:
            b (bytes): The data.
        """
        proof = ResponseProof.FromString(b)
        self.payload = proof.payload
        self.signature = proof.signature
        self.attestation = proof.attestation
        self._load_payload()

    def _load_payload(self):
        pass


class UploadModelResponse(SignedResponse):
    model_id: str

    def validate(
        self,
        model_hash: bytes,
        policy_file: Optional[str] = None,
        policy: Optional[Policy] = None,
        validate_quote: bool = True,
        enclave_signing_key: Optional[bytes] = None,
        allow_simulation_mode: bool = False,
    ):
        """Validates whether this response is valid. This is used for responses you have saved as bytes or in a file.
        This will raise an error if the response is not signed or if it is not valid.

        ***Security & confidentiality warnings:***<br>
        *`validate_quote` and `enclave_signing_key` : in case where the quote validation is set, the `enclave_signing_key` is generated directly using the certificate and the policy file and assigned otherwise.
        The hash of the `enclave_signing_key` is then represented as the MRSIGNER hash.*

        Args:
            model_hash (bytes): Hash of the model to verify against.
            policy_file (Optional[str], optional): Path to the policy file. Defaults to None.
            policy (Optional[Policy], optional): Policy to use. Use `policy_file` to load from a file directly. Defaults to None.
            validate_quote (bool, optional): Whether or not the attestation should be validated too. Defaults to True.
            enclave_signing_key (Optional[bytes], optional): Enclave signing key in case the attestation should not be validated. Defaults to None.
            allow_simulation_mode (bool, optional): Whether or not simulation mode responses should be accepted. Defaults to False.

        Raises:
            AttestationError: Attestation is invalid.
            SignatureError: Signed response is invalid.
            FileNotFoundError: Will be raised if the policy file is not found.
        """
        if not self.is_signed():
            raise SignatureError("Response is not signed")

        if not allow_simulation_mode and self.is_simulation_mode():
            raise SignatureError("Response was produced using simulation mode")

        if not self.is_simulation_mode() and validate_quote and policy_file is not None:
            policy = Policy.from_file(policy_file)

        # Quote validation

        if not self.is_simulation_mode() and validate_quote:
            enclave_signing_key = _validate_quote(self.attestation, policy)

        # Payload validation

        payload = PbPayload.FromString(self.payload).send_model_payload
        if not self.is_simulation_mode():
            try:
                enclave_signing_key.verify(self.signature, self.payload)
            except InvalidSignature:
                raise SignatureError("Invalid signature")

        # Input validation

        if model_hash != payload.model_hash:
            raise SignatureError("Invalid response model_hash")

    def _load_payload(self):
        payload = PbPayload.FromString(self.payload).send_model_payload
        self.model_id = payload.model_id


class TensorInfo:
    dims: List[int]
    datum_type: ModelDatumType
    index: int
    index_name: str

    def __init__(
        self, dims: List[int], datum_type: ModelDatumType, index: int, index_name: str
    ):
        self.dims = dims
        self.datum_type = datum_type


class Tensor:
    info: TensorInfo
    bytes_data: bytes

    def __init__(self, info: TensorInfo, bytes_data: bytes):
        self.info = info
        self.bytes_data = bytes_data

    def as_flat(self) -> list:
        return list(deserialize_tensor(self.bytes_data, self.info.datum_type))

    def as_numpy(self):
        import numpy

        arr = numpy.array([*self.as_flat()], dtype=dtype_to_numpy(self.info.datum_type))
        arr.shape = self.shape
        return arr

    def as_torch(self):
        import torch

        arr = torch.asarray(
            [*self.as_flat()],
            dtype=getattr(torch, dtype_to_torch(self.info.datum_type)),
        )
        arr.view(self.shape)
        return arr

    @property
    def shape(self) -> tuple:
        return tuple(self.info.dims)

    @property
    def datum_type(self) -> ModelDatumType:
        return self.info.datum_type


class PredictResponse(SignedResponse):
    output_tensors: List[Tensor]
    model_id: str

    def __init__(
        self,
        input_tensors: Union[List[List[Any]], List[Any]],
        input_datum_type: Union[List[ModelDatumType], ModelDatumType],
        input_shape: Union[List[List[int]], List[int]],
        response: PbRunModelReply,
        sign: bool,
        attestation: Optional[GetSgxQuoteWithCollateralReply] = None,
        enclave_signing_key: Optional[bytes] = None,
        allow_simulation_mode: bool = False,
    ):
        payload = PbPayload.FromString(response.payload).run_model_payload
        self.output_tensors = [
            Tensor(
                info=TensorInfo(
                    tensor.info.dims,
                    tensor.info.datum_type,
                    tensor.info.index,
                    tensor.info.index_name,
                ),
                bytes_data=tensor.bytes_data,
            )
            for tensor in payload.output_tensors
        ]
        self.model_id = payload.model_id

        # Response Verification
        if sign:
            self.payload = response.payload
            self.signature = response.signature
            self.attestation = attestation
            self.validate(
                self.model_id,
                input_tensors,
                input_datum_type,
                input_shape,
                validate_quote=False,
                enclave_signing_key=enclave_signing_key,
                allow_simulation_mode=allow_simulation_mode,
            )

    def validate(
        self,
        model_id: str,
        tensors: Union[List[List[Any]], List[Any]],
        dtype: Union[List[ModelDatumType], ModelDatumType],
        shape: Union[List[List[int]], List[int]],
        policy_file: Optional[str] = None,
        policy: Optional[Policy] = None,
        validate_quote: bool = True,
        enclave_signing_key: Optional[bytes] = None,
        allow_simulation_mode: bool = False,
    ):
        """Validates whether this response is valid. This is used for responses you have saved as bytes or in a file.
        This will raise an error if the response is not signed or if it is not valid.

        ***Security & confidentiality warnings:***<br>
            *`validate_quote` and `enclave_signing_key` : in case where the quote validation is set, the `enclave_signing_key` is generated directly using the certificate and the policy file and assigned otherwise.
            The hash of the `enclave_signing_key` is then represented as the MRSIGNER hash.<br>
            When the simulation mode is off, the attestation is verified, and only in that case, the data is processed while assigning `data_list`*

        Args:
            model_id (str): The model id to check against.
            tensors (List[Any]): Input used to run the model, to validate against.
            policy_file (Optional[str], optional): Path to the policy file. Defaults to None.
            policy (Optional[Policy], optional): Policy to use. Use `policy_file` to load from a file directly. Defaults to None.
            validate_quote (bool, optional): Whether or not the attestation should be validated too. Defaults to True.
            enclave_signing_key (Optional[bytes], optional): Enclave signing key in case the attestation should not be validated. Defaults to None.
            allow_simulation_mode (bool, optional): Whether or not simulation mode responses should be accepted. Defaults to False.

        Raises:
            AttestationError: Attestation is invalid.
            SignatureError: Signed response is invalid.
            FileNotFoundError: Will be raised if the policy file is not found.
        """
        if not self.is_signed():
            raise SignatureError("Response is not signed")

        if not allow_simulation_mode and self.is_simulation_mode():
            raise SignatureError("Response was produced using simulation mode")

        if not self.is_simulation_mode() and validate_quote and policy_file is not None:
            policy = Policy.from_file(policy_file)

        # Quote validation

        if not self.is_simulation_mode() and validate_quote:
            enclave_signing_key = _validate_quote(self.attestation, policy)

        # Payload validation

        payload = PbPayload.FromString(self.payload).run_model_payload
        if not self.is_simulation_mode():
            try:
                enclave_signing_key.verify(self.signature, self.payload)
            except InvalidSignature:
                raise SignatureError("Invalid signature")

        hash = sha256()
        for tensor_iterable, tensor_dtype, _tensor_shape in translate_tensors(
            tensors, dtype, shape
        ):
            for chunk in serialize_tensor(tensor_iterable, tensor_dtype):
                hash.update(chunk)

        if hash.digest() != payload.input_hash:
            raise SignatureError("Invalid response input_hash")

        if model_id != payload.model_id:
            raise SignatureError("Invalid response model_id")


class DeleteModelResponse:
    pass


def raise_exception_if_conn_closed(f):
    """
    Decorator which raises an exception if the BlindAiConnection is closed before calling
    the decorated method
    """

    @wraps(f)
    def wrapper(self, *args, **kwds):
        if self.closed:
            raise ValueError("Illegal operation on closed connection.")
        return f(self, *args, **kwds)

    return wrapper


class BlindAiConnection(contextlib.AbstractContextManager):
    _channel: Optional[Channel] = None
    policy: Optional[Policy] = None
    _stub: Optional[ExchangeStub] = None
    enclave_signing_key: Optional[bytes] = None
    simulation_mode: bool = False
    attestation: Optional[GetSgxQuoteWithCollateralReply] = None
    server_version: Optional[str] = None
    client_info: ClientInfo
    tensor_inputs: Optional[List[List[Any]]]
    tensor_outputs: Optional[List[ModelDatumType]]
    closed: bool = False
    _jwt: Optional[str] = None

    def _grpc_call_metadata(self):
        if self._jwt is not None:
            return (("accesstoken", self._jwt),)
        else:
            return ()

    def __init__(
        self,
        addr: Optional[str] = None,
        server_name: str = "blindai-srv",
        policy: Optional[str] = None,
        certificate: Optional[str] = None,
        simulation: bool = False,
        untrusted_port: int = 50052,
        attested_port: int = 50051,
        debug_mode=False,
        api_key: Optional[str] = None,
    ):
        """Connect to the server with the specified parameters.
        You will have to specify here the expected policy (server identity, configuration...)
        and the server TLS certificate, if you are using the hardware mode.

        You don't need to specify an address if you want to reach the Mithril Cloud server.

        If you're using the simulation mode, you don't need to provide a policy and certificate,
        but please keep in mind that this mode should NEVER be used in production as it doesn't
        have most of the security provided by the hardware mode.

        ***Security & confidentiality warnings:***<br>
           *policy: Defines the rules upon which enclaves are accepted (after quote data verification). Contains the hash of MRENCLAVE which helps identify code and data of an enclave. In the case of leakeage of this file, data & model confidentiality would not be affected as the information just serves as a verification check.
           For more details, the attestation info is verified against the policy for the quote. In case of a leakage of the information of this file, code and data inside the secure enclave will remain inaccessible.<br>
           certificate:  The certificate file, which is also generated server side, is used to assigned the claims the policy is checked against. It serves to identify the server for creating a secure channel and begin the attestation process.*

        Args:
            addr (str): The address of BlindAI server you want to reach. If you don't specify anything, you will be automatically connected to Mithril Cloud.
            server_name (str, optional): Contains the CN expected by the server TLS certificate. Defaults to "blindai-srv".
            policy (Optional[str], optional): Path to the toml file describing the policy of the server.
                Generated in the server side. Defaults to None.
            certificate (Optional[str], optional): Path to the public key of the untrusted inference server.
                Generated in the server side. Defaults to None.
            simulation (bool, optional): Connect to the server in simulation mode.
                If set to True, the args policy and certificate will be ignored. Defaults to False.
            untrusted_port (int, optional): Untrusted connection server port. Defaults to 50052.
            attested_port (int, optional): Attested connection server port. Defaults to 50051.
            debug_mode (bool, optional): Prints debug message, will also turn on GRPC log messages. 

        Raises:
            AttestationError: Will be raised in case the policy doesn't match the
                server identity and configuration, or if te attestation is invalid.
            ConnectionError: will be raised if the connection with the server fails.
            VersionError: Will be raised if the version of the server is not supported by the client.
            FileNotFoundError: will be raised if the policy file, or the certificate file is not
                found (in Hardware mode).
        """
        if debug_mode:  # pragma: no cover
            os.environ["GRPC_TRACE"] = "transport_security,tsi"
            os.environ["GRPC_VERBOSITY"] = "DEBUG"

        if addr is None:
            # Use Mithril Cloud services.
            if MITHRIL_SERVICES_INSECURE:
                channel = grpc.insecure_channel(MITHRIL_SERVICES_URL)
            else:
                channel = grpc.secure_channel(
                    MITHRIL_SERVICES_URL,
                    ssl_channel_credentials(root_certificates=MITHRIL_SERVICES_CA),
                )

            stub = licensing_pb2_grpc.LicensingServiceStub(channel)
            enclave_request = licensing_pb2.GetEnclaveRequest(api_key=api_key)

            response = stub.GetEnclave(enclave_request)
            host_ports = response.enclave_url.split(":")
            ports = host_ports[1].split("/")

            policy = Policy.from_str(MITHRIL_SERVICES_POLICY)

            addr = host_ports[0]
            attested_port = ports[0]
            untrusted_port = ports[1]

            self._jwt = response.jwt if len(response.jwt) > 0 else None

            logging.info("Successfully connected to Mithril Security Cloud")
            logging.debug(
                f"Selected enclave {response.enclave_url} & has jwt? {len(response.jwt) > 0}"
            )

        uname = platform.uname()
        self.client_info = ClientInfo(
            uid=sha256((socket.gethostname() + "-" + getpass.getuser()).encode("utf-8"))
            .digest()
            .hex(),
            platform_name=uname.system,
            platform_arch=uname.machine,
            platform_version=uname.version,
            platform_release=uname.release,
            user_agent="blindai_python",
            user_agent_version=app_version,
        )

        self._connect_enclave(
            addr,
            server_name,
            policy,
            certificate,
            simulation,
            untrusted_port,
            attested_port,
            use_mithril_services=True,
        )

    def _connect_enclave(
        self,
        addr: str,
        server_name,
        policy,
        certificate,
        simulation,
        untrusted_port,
        attested_port,
        use_mithril_services: bool = False,
    ):
        self.simulation_mode = simulation

        addr = strip_https(addr)

        untrusted_client_to_enclave = addr + ":" + str(untrusted_port)
        attested_client_to_enclave = addr + ":" + str(attested_port)

        if not self.simulation_mode:
            self.policy = (
                policy if isinstance(policy, Policy) else Policy.from_file(policy)
            )

        if simulation:
            logging.warning("Untrusted server certificate check bypassed")

        if simulation or use_mithril_services:
            try:
                socket.setdefaulttimeout(CONNECTION_TIMEOUT)
                untrusted_server_cert = ssl.get_server_certificate(
                    (addr, untrusted_port)
                )
                untrusted_server_creds = ssl_channel_credentials(
                    root_certificates=bytes(untrusted_server_cert, encoding="utf8")
                )

            except RpcError as rpc_error:
                raise ConnectionError(check_rpc_exception(rpc_error))

            except socket.error as socket_error:
                raise ConnectionError(check_socket_exception(socket_error))

        else:
            with open(certificate, "rb") as f:
                untrusted_server_creds = ssl_channel_credentials(
                    root_certificates=f.read()
                )

        connection_options = (("grpc.ssl_target_name_override", server_name),)

        try:
            channel = secure_channel(
                untrusted_client_to_enclave,
                untrusted_server_creds,
                options=connection_options,
            )
            stub = AttestationStub(channel)

            response = stub.GetServerInfo(
                server_info_request(), metadata=self._grpc_call_metadata()
            )
            self.server_version = response.version
            if not supported_server_version(response.version):
                raise VersionError(
                    "Incompatible client/server versions. Please use the correct client for your server."
                )

            if self.simulation_mode:
                logging.warning(
                    "Attestation process is bypassed: running without requesting and checking attestation"
                )
                response = stub.GetCertificate(
                    certificate_request(), metadata=self._grpc_call_metadata()
                )
                server_cert = encode_certificate(response.enclave_tls_certificate)

            else:
                self.attestation = stub.GetSgxQuoteWithCollateral(
                    quote_request(), metadata=self._grpc_call_metadata()
                )
                claims = verify_dcap_attestation(
                    self.attestation.quote,
                    self.attestation.collateral,
                    self.attestation.enclave_held_data,
                )

                verify_claims(claims, self.policy)
                server_cert = claims.get_server_cert()

                logging.info("Quote verification passed")
                logging.info(f"Certificate from attestation process")
                logging.info("MREnclave " + claims.sgx_mrenclave)

            channel.close()
            self.enclave_signing_key = get_enclave_signing_key(server_cert)
            server_creds = ssl_channel_credentials(root_certificates=server_cert)
            channel = secure_channel(
                attested_client_to_enclave, server_creds, options=connection_options
            )

            self._stub = ExchangeStub(channel)
            self._channel = channel
            logging.info("Successfuly connected to the server")

        except RpcError as rpc_error:
            channel.close()
            raise ConnectionError(check_rpc_exception(rpc_error))

    @raise_exception_if_conn_closed
    def upload_model(
        self,
        model: str,
        tensor_inputs: Optional[List[Tuple[List[int], ModelDatumType]]] = None,
        tensor_outputs: Optional[List[ModelDatumType]] = None,
        shape: Tuple = None,
        dtype: ModelDatumType = None,
        dtype_out: ModelDatumType = None,
        sign: bool = False,
        model_name: Optional[str] = None,
        save_model: bool = True,
        model_id: Optional[str] = None,
    ) -> UploadModelResponse:
        """Upload an inference model to the server.
        The provided model needs to be in the Onnx format.

        ***Security & confidentiality warnings:***<br>
        *`model`: The model sent on a Onnx format is encrypted in transit via TLS (as all connections). It may be subject to inference Attacks if an adversary is able to query the trained model repeatedly to determine whether or not a particular example is part of the trained dataset model.<br>
        `sign` : by enabling sign, DCAP attestation is verified by the SGX attestation model. This attestation model relies on Elliptic Curve Digital Signature algorithm (ECDSA).*


        Args:
            model (str): Path to Onnx model file.
            tensor_inputs (List[Tuple[List[int], ModelDatumType]], optional): The list of input fact and datum types for each input grouped together in lists, describing the different inputs of the model. Defaults to None.
            tensor_outputs (List[ModelDatumType], optional): The list of datum types describing the different output types of the model. Defaults to ModelDatumType.F32
            shape (Tuple, optional): The shape of the model input. Defaults to None.
            datum_type (ModelDatumType, optional): The type of the model input data (f32 by default). Defaults to ModelDatumType.F32.
            dtype_out (ModelDatumType, optional): The type of the model output data (f32 by default). Defaults to ModelDatumType.F32.
            sign (bool, optional): Get signed responses from the server or not. Defaults to False.
            model_name (Optional[str], optional): Name of the model.
            save_model (bool, optional): Whether or not the model will be saved to disk in the server. The model will be saved encrypted (sealed) so that only the server enclave can load it afterwards. The server will load the model on startup. Defaults to False.
            model_id (Optional[str], optional): Id of the model. By default, the server will assign a random UUID.

        Raises:
            ConnectionError: Will be raised if the client is not connected.
            FileNotFoundError: Will be raised if the model file is not found.
            SignatureError: Will be raised if the response signature is invalid.
            ValueError: Will be raised if the connection is closed.

        Returns:
            UploadModelResponse: The response object.
        """
        response = None

        if model_name is None:
            model_name = os.path.basename(model)
        try:
            with open(model, "rb") as f:
                data = f.read()

            (inputs, outputs) = _get_input_output_tensors(
                tensor_inputs, tensor_outputs, shape, dtype, dtype_out
            )
            response = self._stub.SendModel(
                (
                    PbSendModelRequest(
                        length=len(data),
                        data=chunk,
                        sign=sign,
                        model_id=model_id,
                        model_name=model_name,
                        client_info=self.client_info,
                        tensor_inputs=inputs,
                        tensor_outputs=outputs,
                        save_model=save_model,
                    )
                    for chunk in create_byte_chunk(data)
                ),
                metadata=self._grpc_call_metadata(),
            )

        except RpcError as rpc_error:
            raise ConnectionError(check_rpc_exception(rpc_error))

        # Response Verification
        payload = PbPayload.FromString(response.payload).send_model_payload
        ret = UploadModelResponse()
        ret.model_id = payload.model_id

        if sign:
            ret.payload = response.payload
            ret.signature = response.signature
            ret.attestation = self.attestation
            ret.validate(
                sha256(data).digest(),
                validate_quote=False,
                enclave_signing_key=self.enclave_signing_key,
                allow_simulation_mode=self.simulation_mode,
            )

        return ret

    @raise_exception_if_conn_closed
    def predict(
        self,
        model_id: str,
        tensors: Union[List[List[Any]], List[Any]],
        dtype: Optional[Union[List[ModelDatumType], ModelDatumType]] = None,
        shape: Optional[Union[List[List[int]], List[int]]] = None,
        sign: bool = False,
    ) -> PredictResponse:
        """
        Send data to the server to make a secure inference.
        
        The data provided must be in a list, as the tensor will be rebuilt inside the server.
        
        ***Security & confidentiality warnings:***<br>
        *`model_id` : hash of the Onnx model uploaded. the given hash is return via gRPC through the proto files. It's a SHA-256 hash that is generated each time a model is uploaded.<br>
        `data_list`: protected in transit and protected when running it on the secure enclave. In the case of a compromised OS, the data is isolated and confidential by SGX design.<br>
        `sign`: by enabling sign, DCAP attestation is enabled to verify the SGX attestation model. This attestation model relies on Elliptic Curve Digital Signature algorithm (ECDSA).*

        Args:
            model_id (str): If set, will run a specific model.
            tensors (Union[List[Any], List[List[Any]]))): The input data. It must be an array of numbers or an array of arrays of numbers of the same type datum_type specified in `upload_model`.
            sign (bool, optional): Get signed responses from the server or not. Defaults to False.
        Raises:
            ConnectionError: Will be raised if the client is not connected.
            SignatureError: Will be raised if the response signature is invalid
            ValueError: Will be raised if the connection is closed
        Returns:
            RunModelResponse: The response object.
        """

        try:
            response = self._stub.RunModel(
                (
                    # this will create an iterator of PbRunModelRequest, that will return
                    # chunks, one tensor input at a time
                    PbRunModelRequest(
                        model_id=model_id,
                        client_info=self.client_info,
                        input_tensors=[
                            PbTensorData(
                                info=PbTensorInfo(
                                    dims=tensor_shape,
                                    datum_type=tensor_dtype,
                                    index=i,  # only send the ith tensor for this call
                                ),
                                bytes_data=chunk,
                            )
                        ],
                        sign=sign,
                    )
                    for i, (tensor_iterable, tensor_dtype, tensor_shape) in enumerate(
                        translate_tensors(tensors, dtype, shape)
                    )
                    for chunk in serialize_tensor(tensor_iterable, tensor_dtype)
                ),
                metadata=self._grpc_call_metadata(),
            )

        except RpcError as rpc_error:
            raise ConnectionError(check_rpc_exception(rpc_error))

        return PredictResponse(
            tensors,
            dtype,
            shape,
            response,
            sign,
            self.attestation,
            self.enclave_signing_key,
            self.simulation_mode,
        )

    @raise_exception_if_conn_closed
    def delete_model(self, model_id: str) -> DeleteModelResponse:
        """Delete a model in the inference server.
        This may be used to free up some memory.
        Note that the model in currently stored in-memory, and you cannot keep it loaded across server restarts.
        ***Security & confidentiality warnings:***<br>
            *model_id : The deletion of a model only relies on the `model_id`. It doesn't relies on a session token or anything, hence if the `model_id` is known, it's deletion is possible.*

        Args:
            model_id (str): The id of the model to remove.

        Raises:
            ConnectionError: Will be raised if the client is not connected or if an happens.
            ValueError: Will be raised if the connection is closed
        Returns:
            DeleteModelResponse: The response object.
        """
        try:
            self._stub.DeleteModel(
                PbDeleteModelRequest(model_id=model_id),
                metadata=self._grpc_call_metadata(),
            )

        except RpcError as rpc_error:
            raise ConnectionError(check_rpc_exception(rpc_error))

        return DeleteModelResponse()

    def close(self):
        """Close the connection between the client and the inference server. This method has no effect if the file is already closed."""
        if not self.closed:
            self._channel.close()
            self.closed = True
            self._channel = None
            self._stub = None
            self.policy = None
            self.server_version = None

    def __enter__(self):
        """Return the BlindAiConnection upon entering the runtime context."""
        return self

    def __exit__(self, *args):
        """Close the connection to BlindAI server and raise any exception triggered within the runtime context."""
        self.close()


@wraps(BlindAiConnection.__init__, assigned=("__doc__", "__annotations__"))
def connect(*args, **kwargs):
    return BlindAiConnection(*args, **kwargs)
